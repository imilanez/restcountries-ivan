{"ast":null,"code":"var _jsxFileName = \"/home/imilanez/codeChallenges/restcountries-ivan/src/components/server.autosuggest.js\";\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport './autosuggest.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ServerAutoSuggest extends React.Component {\n  constructor() {\n    super();\n\n    this.getSuggestions = async value => {\n      const inputValue = value.trim().toLowerCase();\n      let response = await fetch(\"https://restcountries.eu/rest/v2/name/\" + inputValue + \"?fields=name;region;population;languages;currencies\");\n      let data = await response.json();\n      return data;\n    };\n\n    this.getSuggestionValue = suggestion => suggestion.name;\n\n    this.renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"sugg-option\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"name\",\n        children: [suggestion.name, \" | \", suggestion.region, \" | \", suggestion.population]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this);\n\n    this.renderCards = suggestion => /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"sugg-option\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"name\",\n        children: [\"Country Name: \", suggestion.name, \", Region: \", suggestion.region, \", Currency Name: \", suggestion.currencies[0].name, \", Language Name: \", suggestion.languages[0].name, \", Population: \", suggestion.population.toLocaleString(navigator.language, {\n          minimumFractionDigits: 0\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this);\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.getSuggestions(value).then(data => {\n        if (data.Error) {\n          this.setState({\n            suggestions: []\n          });\n        } else {\n          this.setState({\n            suggestions: data\n          });\n        }\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  shouldRenderSuggestions(value) {\n    return value.trim().length > 2;\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state;\n    const inputProps = {\n      placeholder: 'Type country name',\n      value,\n      onChange: this.onChange\n    };\n    return /*#__PURE__*/_jsxDEV(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: this.getSuggestionValue,\n      shouldRenderSuggestions: this.shouldRenderSuggestions,\n      renderSuggestion: this.renderSuggestion,\n      renderCards: this.renderCards,\n      inputProps: inputProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ServerAutoSuggest;","map":{"version":3,"sources":["/home/imilanez/codeChallenges/restcountries-ivan/src/components/server.autosuggest.js"],"names":["React","Autosuggest","ServerAutoSuggest","Component","constructor","getSuggestions","value","inputValue","trim","toLowerCase","response","fetch","data","json","getSuggestionValue","suggestion","name","renderSuggestion","region","population","renderCards","currencies","languages","toLocaleString","navigator","language","minimumFractionDigits","onChange","event","newValue","setState","onSuggestionsFetchRequested","then","Error","suggestions","onSuggestionsClearRequested","state","shouldRenderSuggestions","length","render","inputProps","placeholder"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport './autosuggest.css';\n\nclass ServerAutoSuggest extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            value: '',\n            suggestions: []\n        };\n    }\n\n    getSuggestions = async (value) => {\n        const inputValue = value.trim().toLowerCase();\n        let response = await fetch(\"https://restcountries.eu/rest/v2/name/\" + inputValue + \"?fields=name;region;population;languages;currencies\");\n        let data = await response.json();\n        return data;\n    };\n\n    getSuggestionValue = suggestion => suggestion.name;\n\n    renderSuggestion = suggestion => (\n        <span className=\"sugg-option\">\n            <span className=\"name\">\n                {suggestion.name} | {suggestion.region} | {suggestion.population}\n            </span>\n        </span>\n    );\n\n    renderCards = suggestion => (\n        <span className=\"sugg-option\">\n            <span className=\"name\">\n                Country Name: {suggestion.name},\n                Region: {suggestion.region},\n                Currency Name: {suggestion.currencies[0].name},\n                Language Name: {suggestion.languages[0].name},\n                Population: {suggestion.population.toLocaleString(navigator.language, { minimumFractionDigits: 0 })}\n            </span>\n        </span>\n    );\n\n    onChange = (event, { newValue }) => {\n        this.setState({\n            value: newValue\n        });\n    };\n\n    onSuggestionsFetchRequested = ({ value }) => {\n        this.getSuggestions(value)\n            .then(data => {\n                if (data.Error) {\n                    this.setState({\n                        suggestions: []\n                    });\n                } else {\n                    this.setState({\n                        suggestions: data\n                    });\n                }\n            })\n    };\n\n    shouldRenderSuggestions(value) {\n        return value.trim().length > 2;\n    }\n\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    render() {\n        const { value, suggestions } = this.state;\n        const inputProps = {\n            placeholder: 'Type country name',\n            value,\n            onChange: this.onChange\n        };\n\n        return (\n            <Autosuggest\n                suggestions={suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={this.getSuggestionValue}\n                shouldRenderSuggestions={this.shouldRenderSuggestions}\n                renderSuggestion={this.renderSuggestion}\n                renderCards={this.renderCards}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nexport default ServerAutoSuggest;"]},"metadata":{},"sourceType":"module"}